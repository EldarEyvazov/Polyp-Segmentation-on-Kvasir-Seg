import tensorflow as tf
import csv
from tensorflow.keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint
from tensorflow.keras import backend as K

# Custom callback to save metrics to CSV
class CSVLogger(Callback):
    def __init__(self, filename, separator=',', append=False):
        super(CSVLogger, self).__init__()
        self.sep = separator
        self.filename = filename
        self.append = append
        self.csv_file = None
        self.writer = None
        self.keys = None
        self.append_header = True

    def on_train_begin(self, logs=None):
        if self.append:
            if tf.io.gfile.exists(self.filename):
                with open(self.filename, 'r') as f:
                    self.append_header = not bool(len(f.readline()))
            mode = 'a'
        else:
            mode = 'w'

        self.csv_file = open(self.filename, mode, newline='')
        self.writer = csv.DictWriter(self.csv_file, fieldnames=None, delimiter=self.sep)
        self.keys = None

    def on_epoch_end(self, epoch, logs=None):
        if not self.keys:
            self.keys = sorted(logs.keys())
            self.writer.fieldnames = ['epoch'] + self.keys
            if self.append_header:
                self.writer.writeheader()

        row_dict = {'epoch': epoch}
        row_dict.update((key, logs[key]) for key in self.keys)
        self.writer.writerow(row_dict)
        self.csv_file.flush()

    def on_train_end(self, logs=None):
        if self.csv_file:
            self.csv_file.close()
            self.csv_file = None
            self.writer = None
            self.keys = None
